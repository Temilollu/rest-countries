{"version":3,"sources":["Components/HomePage/Country.component.jsx","Components/HomePage/HomePage.component.jsx","Components/Header/Header.component.jsx","Components/Header/Header-two.jsx","Components/Nation/Nation.jsx","Components/HomePage/FullDetails.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Country","props","state","value","this","countryData","history","match","className","onClick","push","url","name","src","flag","alt","population","capital","region","React","Component","withRouter","HomePage","countries","map","country","key","Header","handleChange","thread","width","height","viewBox","class","fill","xmlns","fill-rule","d","type","onChange","placeholder","length","HeaderTwo","e","console","log","target","setState","handleThread","allCountries","fetch","then","res","json","data","filtered","filter","count","toLowerCase","includes","NationDetails","nation","nativeName","subregion","currencies","languages","topLevelDomain","language","currency","FullDetails","id","params","to","countree","Nation","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa07e5f1.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../App.css'\r\n// import FullDetails from './FullDetails.component'\r\n\r\n// import HeaderTwo from '../Header/Header-two'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\n \r\nclass Country extends React.Component{\r\n    constructor(props){\r\n         super()\r\n         this.state = {\r\n          value : true\r\n         }\r\n    }\r\n \r\n    render(){ \r\n        const { countryData, history, match  } = this.props \r\n        return( \r\n            <div className=\"col mb-4\" onClick={() => history.push(`${match.url}${countryData.name}`)} >\r\n            <div className=\"card\">\r\n              <img src={countryData.flag} className=\"card-img-top\" alt=\"...\"/>\r\n              <div className=\"card-body\">\r\n              <p> Name : {countryData.name}</p>\r\n               <p>Population {countryData.population}</p>\r\n               <p>Capital : {countryData.capital}</p>\r\n               <p>Region : {countryData.region}</p> \r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Country) ;","import React from 'react';\r\nimport Country from './Country.component'\r\n\r\nimport '../../App.css'\r\n\r\nconst HomePage = (props) => {\r\n    return ( \r\n        <div className=\"row row-cols-1 row-cols-md-3 envelope\">\r\n           {props.countries.map(country =>  <Country key={country.name} countryData={country} />)}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default HomePage;","import React from 'react';\r\nimport HomePage from '../HomePage/HomePage.component'\r\n\r\nexport const Header = (props) => {\r\n      const {handleChange, countries, thread }  = props\r\n    return (\r\n     <div className='apps'>\r\n       <div className=\"main-header\">\r\n         <h1>Where in the world?</h1>\r\n       </div>\r\n       <div className=\"header\">\r\n         <div className=\"svg\">\r\n         <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-search\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n         <path fill-rule=\"evenodd\" d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\"/>\r\n         <path fill-rule=\"evenodd\" d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\"/>\r\n       </svg>\r\n         </div>\r\n          <input type=\"text\" onChange={handleChange} placeholder=\"Search for a country...\"/>\r\n        <select onChange={thread}>\r\n            <option value=\"\">Filter By Region:</option>\r\n            <option value=\"Africa\">Africa</option>\r\n            <option value=\"Asia\">Asia</option>\r\n            <option value=\"America\">America</option>\r\n            <option value=\"Europe\">Europe</option>\r\n            <option value=\"Oceania\">Oceania</option>\r\n    </select>\r\n       </div>\r\n       \r\n        {countries.length  !== 0 && <HomePage countries={countries}/> } \r\n      </div> \r\n    )\r\n  \r\n   \r\n}\r\n","import React from 'react';\r\nimport  { Header  } from './Header.component'\r\n\r\nclass HeaderTwo extends React.Component {\r\n    constructor(){\r\n      super()\r\n       this.state = {\r\n         allCountries : [],\r\n         value : '',\r\n         thread : true\r\n       }\r\n    }\r\n    \r\n    componentDidMount(){\r\n      fetch(`https://restcountries.eu/rest/v2/all`)\r\n      .then(res => res.json())\r\n      .then(data => this.setState({allCountries : data}))\r\n    }\r\n  \r\n    handleChange = (e) =>{\r\n      console.log(e.target.value)\r\n     this.setState({value : e.target.value, thread : true})\r\n    }\r\n    handleThread  = (e) => {\r\n      this.setState({value : e.target.value, thread : false})\r\n    }\r\n    render(){\r\n       const {allCountries, value} = this.state\r\n       let filtered = allCountries.filter( count => {\r\n        return this.state.thread ?\r\n         count.name.toLowerCase().includes(value.toLowerCase()) : \r\n         count.region.toLowerCase().includes(value.toLowerCase())\r\n      })\r\n    \r\n        return (\r\n      <div className=\"App\">\r\n        <Header handleChange={this.handleChange} countries={filtered} thread={this.handleThread}/>\r\n      </div>\r\n    );\r\n    }\r\n  \r\n  }\r\n  \r\n  export default HeaderTwo;","import React from 'react';\r\nconst NationDetails = (props) => {\r\n    const {nativeName,name, flag,population, region, subregion, capital, currencies, languages, topLevelDomain, } = props.nation\r\n    console.log(languages.map(language => language.name))\r\n    return ( \r\n        <div className=\"containers\">\r\n           <div className=\"flag\">\r\n              <img src={flag} alt=\"\"/></div>\r\n              <div className=\"details\">\r\n                  <div className=\"first\">\r\n                    <h1>{name}</h1>\r\n                    <p>Population : {population}</p>\r\n                    <p>Native name : {nativeName} </p>\r\n                    <p>Region : {region}</p>\r\n                    <p>Sub Region : {subregion} </p>\r\n                    <p>Capital : {capital}</p>            \r\n              </div>\r\n              <div className=\"second\">\r\n                  <p>Top Level Domainm :{topLevelDomain}</p>\r\n                  <p>Currencies : {currencies.map( currency => currency.name)}</p>\r\n                  <p>Languages : {languages.map(language => language.name + ' ')}</p>\r\n              </div>\r\n           </div> \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default NationDetails;","import React from 'react';\r\nimport NationDetails from '../Nation/Nation'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst FullDetails = (props) => {\r\n   const id = props.match.params.id\r\n    return ( \r\n       <div>\r\n          <Link  to=\"/\" className=\"back\">\r\n          <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-left\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n  <path fill-rule=\"evenodd\" d=\"M5.854 4.646a.5.5 0 0 1 0 .708L3.207 8l2.647 2.646a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 0 1 .708 0z\"/>\r\n  <path fill-rule=\"evenodd\" d=\"M2.5 8a.5.5 0 0 1 .5-.5h10.5a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z\"/>\r\n</svg>\r\n             Back\r\n           </Link>\r\n            {\r\n               props.country.map( countree => countree.name === id ? \r\n               <NationDetails key={countree.name} nation={countree} /> \r\n               : null )\r\n            } \r\n       </div>\r\n     );\r\n}\r\n \r\nexport default FullDetails ;","import React from 'react';\nimport  HeaderTwo   from './Components/Header/Header-two.jsx'\nimport './App.css';\nimport {Switch,Route} from 'react-router-dom';\n\n\nimport FullDetails from './Components/HomePage/FullDetails.component'\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n       this.state = {\n        allCountries : []\n       }\n     }\n\n     componentDidMount(){\n      fetch(`https://restcountries.eu/rest/v2/all`)\n      .then(res => res.json())\n      .then(data => this.setState({allCountries : data}))\n    }\n \n  render(){\n    return (  \n       <div className=\"App\">\n        <Switch>\n         <Route exact path='/' component={HeaderTwo}/>\n         <Route  path='/:id' \n                 render={ (props) => (\n                    <FullDetails\n                      {...props}\n                      country={this.state.allCountries}\n                    />\n                  )} />\n      </Switch>\n       </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n </BrowserRouter>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}